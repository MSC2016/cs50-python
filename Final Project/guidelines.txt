fileio.py
Implements the FileIO class for managing interactions with the secrets database file.
Class: FileIO

Public Methods:
read_data() -> bytes | None
	Checks if the file exists.
	Acquires a file lock.
	Reads and returns the file contents as bytes.
	Returns None if the file is missing or unreadable.

save_data(data: bytes) -> bool
	Acquires a file lock.
	Backs up the current file.
	Writes new data to file.
	Reads file back and compares it to the original data.
	If write is successful, removes backup and returns True.
	If write fails, restores backup and returns False.
	Returns False if any exception occurs during save or restore.

Private Methods:
_backup_file()
	Replaces any existing backup with a copy of the current file.

_restore_backup()
	Restores the original file from the backup if it exists.

--------------------

crypto.py
Implements utility functions for encrypting and decrypting secrets data.

Functions:
encrypt(data: bytes, encryption_key: str) -> bytes | bool
	Encrypts the provided data using the given key.
	Verifies encryption by decrypting with the same key and comparing to the input.
	Returns the encrypted data if verification succeeds.
	Returns False if verification fails.

decrypt(data: bytes, encryption_key: str) -> bytes | bool
	Decrypts the provided data using the given key.
	Returns decrypted data as bytes.
	Returns False if decryption fails (e.g., bad key or corrupted input).

--------------------

datahandler.py

Encapsulates secure interaction between file storage (via FileIO) and encryption (via Crypto).
Responsible for loading and saving encrypted vault data from/to disk.
Does not allow passwords to be passed directly in code.
Supports password retrieval via system keyring or secure user prompt.

Class: DataHandler

Public Methods:

__init__(file_path: str, password: str | None = None, vault_name: str | None = None, use_keyring: bool = True)
	Initializes the handler for a given vault file.
	- If password is explicitly passed, it is used (intended for CLI/setup only).
	- If password is None:
		- If use_keyring is True, attempts to load password from keyring using vault_name.
		- If keyring lookup fails or use_keyring is False, prompts user at runtime.
	Raises ValueError if vault_name is not provided and password is None.

load() -> dict | None
	Reads raw data from file via FileIO.
	If a password is set, decrypts the content.
	Parses the decrypted (or raw) data from JSON.
	Returns the parsed dictionary, or None on failure.

save(data: dict) -> bool
	Serializes the given dictionary to JSON and encodes as bytes.
	If a password is set, encrypts the data.
	Writes the result to disk via FileIO.
	Returns True on success, False if saving fails or encryption error occurs.

Behavior Notes:
- Passwords are never hardcoded in source code or config.
- Users are expected to securely store passwords via CLI (`KeyStore`) or enter them interactively.
- DataHandler never writes to keyring — only reads if configured to.
- Supports both encrypted and unencrypted vaults (if no password is used).

Best Practices:
- For vaults intended to be encrypted, always specify a `vault_name` and rely on `KeyStore`.
- In headless environments (e.g., servers), users should ensure keyring access is configured, or pre-prompting is handled outside the runtime.

Dependencies:
- Crypto (for encryption/decryption)
- FileIO (for file read/write)
- KeyStore (optional, for retrieving password securely)

--------------------

key.py
Implements the Key class for managing a single secret.
Each key consists of a unique name and a dictionary containing a mandatory secret field 
and optional user-defined metadata fields.
The secret field is enforced and required for validation and encryption operations.
All other metadata is customizable and user-controlled.

Class: Key
Public Methods:

get_secret() -> str | None
	Returns the value stored under the mandatory secret field.
	Returns None if not set.

set_secret(value: str, force: bool = False) -> bool
	Sets or updates the value of the secret field.
	Returns False if the secret already contains a value and force is False.
	Returns True and updates the value if force is True.

get_data(field_name: str) -> Any
	Returns the value of the specified metadata field.
	Returns None if the field does not exist.

set_data(field_name: str, value: Any) -> None
	Stores or updates the specified metadata field.
	Overwrites existing values if the field is already present.

delete_data(field_name: str | list[str]) -> bool
	Removes the specified metadata field(s).
	Returns True if at least one field was deleted.
	Returns False if none were found or if the user tries to delete the secret field.

list_data_fields() -> list[str]
	Returns a list of metadata field names, excluding the secret field.

to_dict() -> dict
	Serializes the Key instance to a dictionary, including the secret and all metadata.

from_dict(data: dict) -> Key | None
	Creates a Key instance from a dictionary.
	Requires the dictionary to contain a secret field.
	Returns None if the format is invalid or secret is missing.

validate(data: dict) -> bool
	Returns True if the provided data can be converted to a valid Key object (must contain secret).
	Returns False otherwise.

save_to(vault_name: str) -> bool
	Saves the Key instance to the specified vault.
	Returns True if saved successfully.
	Returns False if a key with the same name already exists in the vault.

--------------------

vault.py
Implements the Vault class for managing a single vault.
Each vault is a dictionary.
Key names must be unique within each vault.
Supports safe deletion, metadata editing, and key migration.

Class: Vault
Public Methods:

get_secret(key_name: str) -> str | None
	Returns the secret value of the specified key.
	Returns None if the key does not exist or has no secret.

create_key(key_name: str, secret: str | Key) -> bool
	Creates a new key with the given name and a secret value or a full Key object.
	Returns False if the key already exists.
	Returns True if the key was successfully created.

delete_key(key_name: str, permanent: bool = False) -> bool
	Deletes the specified key.
	If permanent is False, the key is moved to the global recycle_bin (handled externally).
	Returns False if the key does not exist.
	Returns True if the key was successfully deleted or moved to the recycle bin.

change_secret(key_name: str, new_secret: str) -> bool
	Updates the secret field of an existing key.
	Returns True if updated successfully.
	Returns False if the key does not exist.

get_data(key_name: str, field_name: str) -> Any
	Returns the specified metadata field from the key.
	Returns None if the key or field does not exist.

set_data(key_name: str | Key, field_name: str, value: Any) -> bool
	Sets or updates a metadata field for the specified key.
	Returns False if the key does not exist.
	Returns True on success.

delete_data(key_name: str, field_name: str | list[str]) -> bool
	Deletes the specified metadata field(s) from the key.
	Returns False if the key or fields do not exist or if trying to delete the secret.
	Returns True if fields were deleted.

list_keys() -> list[str]
	Returns a list of all key names in the vault.

list_unique_keys() -> list[str]
	Returns a list of key names that exist only in this vault and not in any others (external comparison required).

move_key(key_name: str, destination_vault: Vault) -> bool
	Moves a key to another vault.
	Returns False if the destination vault already contains a key with the same name.
	Returns True if moved successfully.

clear(permanent: bool = False) -> bool
	Deletes all keys in the vault.
	If permanent is False, and the global recycle bin is enabled, all keys are moved to the recycle bin.
	If permanent is True, keys are permanently deleted.
	Returns True if cleared successfully.
	Returns False otherwise.

find_keys_by_secret(value: str) -> list[str]
	Returns a list of key names whose secret matches the given value.

find_keys_by_data(value: str) -> list[str]
	Returns a list of key names where any metadata field's value matches the given string exactly.

search(value: str) -> list[Key]
	Returns a list of keys where the search value is a substring of:
		- key name
		- any metadata field name or value
		- the secret

--------------------

vaults.py
Implements the Vaults class for managing multiple Vault instances.
Acts as the top-level container for all vaults, including a global recycle_bin 
for soft deletion and a default vault for convenience.
Delegates key-level and metadata operations to individual Vault instances.

Class: Vaults
Public Methods:

create_vault(vault_name: str) -> bool
	Creates a new vault with the specified name.
	Returns False if a vault with the same name already exists.
	On instantiation, creates a 'default' vault and sets it as the default vault.

delete_vault(vault_name: str, permanent: bool = False) -> bool
	Deletes the specified vault.
	Returns False if the vault does not exist.
	If permanent is False and the global recycle bin is enabled, all keys from 
	the deleted vault are moved to the recycle bin.
 	The default vault cannot be deleted.
 	Keys placed in the recycle bin include metadata:
  		- origin_vault
  		- deleted_at (timestamp)
  		- key contents

set_default(vault_name: str) -> bool
	Sets the specified vault as the default vault.
	Returns False if the vault does not exist.

get_default() -> Vault | None
	Returns the current default vault instance.
	Returns None if no default vault is set.

get_vault_data(vault_name: str) -> Vault | None
	Returns the Vault instance with the given name.
	Returns None if the vault does not exist.
	Returns the default vault if no vault name is provided.

list_vaults() -> list[str]
	Returns a list of all vault names managed by this instance.

find_keys_by_value(value: str) -> list[Key]
	Searches across all vaults for keys where the value is found in:
		- the secret
		- any metadata field
		Returns a list of Key objects.

getitem(vault_name: str) -> Vault
	Enables dictionary-like access: vaults["vault_name"].
	Raises KeyError if the vault does not exist.

list_deleted_keys() -> list[dict]
	Returns a list of all deleted keys currently in the recycle bin.
	Each item contains:
		- uuid (str): Unique identifier for the deleted record.
		- origin_vault (str): Vault the key was deleted from.
		- deleted_at (timestamp): When the key was deleted.
		- key_name (str): Original name of the key.
		- key_data (dict): Original key data

restore_key(uuid: str, dst_vault: str = '') -> bool
	Restores a key from the recycle bin using its unique identifier.
	Returns False if the uuid is not found or if the original vault already contains a key 
	with the same name.
	if a dst_vault is specified it moves the key to the specified vault, returns false if 
	destination vault already contains a key with the same name.
	If restored, removes the entry from the recycle bin and re-adds the specified vault.
	Returns True on successful restoration.

clear_bin(permanent: bool = False) -> bool
	Permanently deletes all entries in the recycle bin.
	Returns True if the recycle bin is successfully cleared.
	Returns False if the recycle bin is already empty or an error occurred.

--------------------

keystore.py

Implements the KeyStore class for secure password storage using the system keyring.

Class: KeyStore
Provides access to secure OS-level credential storage to store/retrieve vault passwords.
Passwords are stored with vault name as the username, and a fixed or user-defined service name.

Public Methods:

__init__(service_name: str = "localsecrets")
	Initializes a KeyStore instance with a given service name.
	Default service_name is "localsecrets".

set_key(vault_name: str, password: str) -> None
	Saves the password associated with a vault name to the system keyring.

get_key(vault_name: str) -> str | None
	Retrieves the stored password for the vault.
	Returns None if the password is not found.

delete_key(vault_name: str) -> None
	Deletes the password stored for the vault from the system keyring.

has_key(vault_name: str) -> bool
	Returns True if a password exists in the keyring for the given vault name.

Usage Rules:
- Passwords are never passed directly in code.
- Passwords must be either stored via keyring (CLI recommended) or entered interactively by the user.
- The vault system does not expose methods to store or pass passwords programmatically.
