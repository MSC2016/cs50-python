fileio.py

Implements the FileIO class for managing interactions with the secrets database file.
Responsible for file-level operations only (e.g., existence check, read/write, locking, and validation).
Implements filelock when reading/writing to files
This class does not handle passwords, encryption, or authentication logic.

Class: FileIO
Public Methods:

create_new_secret_db_file(file_path: str) -> bool
    Checks if the file already exists. If it does, returns False.
    Creates a new file containing an empty default_vault_data_object.
    Reads the file back and compares its contents to the original in-memory object.
    Returns True if the file was created and validated, otherwise False.

read_secrets_db_file(file_path: str) -> dict | bool
    Check if the file exists and is readable.
    Check if file is locked 
    Returns the loaded data if successful, file exists and is not locked.
    Returns False if the file is missing, locked, or unreadable.

save_secret_db_file(data: dict, file_path: str) -> bool
    Verifies that the file exists, is unlocked and is writable.
    Locks the file using filelock.
    Overwrites the file with new data.
    Reads the file back and compares with original data.
    Unlocks the file.
    Returns True if saved and validated, otherwise False.

check_file_is_locked(file_path: str) -> bool
    Returns True if the file exists and is locked.
    Returns False otherwise.

check_if_file_exists(file_path: str) -> bool
    Returns True if the file exists.
    Returns False if it does not.

--------------------

crypto.py
Class: crypto
Public Methods:

encrypt_data(data, encryption_key)
    Encrypts data
    checks encryption, uses the same key the data was encrypted with to decrypt, and compares both
    Returns encrypted data if decrypted data and input data are equal
    Returns false otherwise

decrypt_data(data, encryption_key)
    Decrypts received data with received key
    Returns False if something failed

--------------------

key.py

Implements the Key class for managing a single secret.
Each key consists of a name and a dictionary with mandatory secret key for the api_key and optional user-defined metadata fields.

Class: Key
Public Methods:

get_secret() -> str
	Returns the value stored under the mandatory secret field.
	Returns None if not set.

set_secret(value: str, force= False) -> Bool
	Sets or updates the value of the secret field.
	Return False If secret already contains a value and force is False.
	Return True and update the value if force is True

get_data(field_name: str) -> Any
	Returns the value of the requested metadata field.
	Returns None if the field does not exist.

set_data(field_name: str, value: Any) -> None
	Stores or updates the specified metadata field.
	Overwrites existing values if the field is already present.

delete_data(field_name: str | list of field names to delete) -> bool
	Removes the specified metadata field or fields.
	Returns True if successfully deleted.
	Returns False if the field does not exist or if the user is trying to delete the secret.

list_data_fields() -> list[str]
	Returns a list of metadata field names (excluding secret by default).

to_dict() -> dict
	Serializes the Key instance to a dictionary, including secret and all metadata.

from_dict(data: dict) -> Key
	Creates a Key instance from a dictionary.
	Requires the dictionary to contain a secret field.
	Returns None if format is not valid
	
validate(data: dict) -> Bool
	Returns True if data can be converted to key object, False otherwise

save_to(vault_name: str) -> Bool
	Saves the key instance to the specified vault
	Returns true if saved, or false if the a key with the same name already exists in the vault
	
--------------------

vault.py

Implements the Vault class for managing a single logical vault.
Each Vault contains multiple named key instances or secrets
Supports safe deletions -- move to recycle vault instead of deleting

Class: Vault
Public Methods:

get_secret(key_name: str) -> str | None
 	Returns the secret value of the specified key.
 	Returns None if the key does not exist or has no secret.

create_key(key_name: str, secret: str | key object) -> bool
 	Creates a new key with the specified name and secret, or specified data if its passed a key object.
 	Returns False if the key already exists.
	 Returns True if the key was successfully created.

delete_key(key_name: str, permanent: bool = False) -> bool
 	Deletes the specified key.
 	If permanent is False, the key should be moved to a recycle_bin vault (handled externally).
 	Return False if the key does not exist.
 	Return True if deleted or moved to recycle vault.
	Return True if recycle vault is not in use.

change_secret(key_name: str, new_secret: str) -> bool
 	Updates the secret of an existing key.
 	Returns True if updated.
 	Returns False if the key does not exist.

get_data(key_name: str, field_name: str) -> Any
 	Returns a metadata field value for the specified key.
 	Returns None if the key or field does not exist.

set_data(key_name: str | key object, field_name: str, value: Any | data_object) -> bool
 	Sets or updates a metadata field for the specified key.
 	Returns False if the key does not exist.
 	Returns True on success.

delete_data(key_name: str, field_name: str | fiels_names) -> bool
	Deletes a metadata field from the specified key.
	Returns False if the key or field does not exist or if field is protected (secret).
	Returns True if the field was removed.

list_keys() -> list[str]
	Returns a list of all key names in the vault.

list_unique_keys() -> list[str]
	Returns a list of key names that are unique to this vault and not present in any of the other vaults

move_key(key_name: str, destination_vault: Vault) -> bool
	Moves the specified key to another vault.
	Returns False if the destination already has a key with the same name.
	Returns True if successfully moved.

clear(permanent: bool = False) -> bool
	Deletes all keys from the vault.
	If permanent is False, and use recycle vault flag is true, move all key to recycle vault.
	If permanent is True, delete all keys.
	Returns True if the vault was cleared successfully.
	Returns False if any key could not be deleted under the current settings.

find_keys_by_secret(value: str) -> list[str]
	Returns a list of key names where the secret is equal the specified value.

find_keys_by_data(value: str) -> list[str]
	Returns a list of key names where any data field name is equal the specified value.

search(Value: str) -> list[key]
	Returns a list of keys that contain any string equal or partialy equal to value.
	For this maybe each key should have a data, pointing to the vault where the key is stored.
	
vaults.py

Implements the Vaults class for managing multiple Vault instances.
Acts as the top-level container for all vaults, enabling creation, deletion, selection, and organization.
Supports default vault logic for simplified usage when only one vault is actively used.
Delegates secret-level access and metadata handling to individual Vault instances.
Includes recycle_bin vault to store deleted keys, when enabled and permanent flag is set to False

Class: Vaults
Public Methods:

create_vault(vault_name: str) -> bool
	Creates a new vault with the specified name.
	Returns False if a vault with the same name already exists.
	When instantiated creates a 'default' vault and sets 'default_vault' value to 'default' vault name.
	

delete_vault(vault_name: str, permanent: bool = False) -> bool
	Deletes the specified vault.
	Returns False if the vault does not exist.
	If permanent is False, keys from the deleted vault are moved to the recycle_bin vault.
	If recycle_bin is disabled, deletion is prevented unless forced permanent.
	The default vault can not be deleted.
	Data in recycle vault should be in a different structure and should contain, deletion index, deletion date/time and key data
	
set_default(vault_name: str) -> bool
	Sets the specified vault as the default vault.
	Returns False if the vault does not exist.

get_default() -> Vault | None
	Returns the current default vault instance.
	Returns None if no default is set.

get_vault_data(vault_name: str) -> Vault | None
	Returns the Vault instance with the given name.
	Returns None if the vault does not exist.
	Returns the default vault if no vault_name is provided

list_vaults() -> list[str]
	Returns a list of all vault names managed by this instance.

find_keys_by_value(value: str) -> list[key]
	Searches all vaults for any keys the specified value in secret.
	Returns a list key objects

__getitem__(vault_name: str) -> Vault
 Enables dictionary-like access to vaults via vaults["vault_name"].
 Raises KeyError if the vault does not exist.

Behavior
If a recycle_bin vault is enabled (by default), all key deletions move the key to the recycle_bin instead of permanently deleting it.
The default deletion behavior is soft delete unless permanent=True is specified, or the vault is created with the flag use_recycle_vault = false.
A configuration flag must be set at secrets.be creation time to enforce immediate deletion and skip recycle bin logic.

## TODO ##
vault.py
search(Value: str) -> list[key]
	Returns a list of keys value is a substring of key name, or any of the field names or values including secret.
	For this maybe each key should have a data point, pointing to the vault where the key is stored.